#include <iostream>
using namespace std;
// nums = [1, 2, 3]
// target = 4

// The possible combination ways are:
// (1, 1, 1, 1)
// (1, 1, 2)
// (1, 2, 1)
// (1, 3)
// (2, 1, 1)
// (2, 2)
// (3, 1)

// Note that different sequences are counted as different combinations.

// Therefore the output is 7.

class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        int numSols = 0;
        combinationSumHelper(nums, 0, target, numSols);
        
        return numSols;
    }
    
    
    // Brute force, but must do DP as well?
    void combinationSumHelper(vector<int>& nums, const int sumSoFar, int target, int& numSols) {
        // iterate through each num and check 
        // if num[i] + sumSoFar == target, increment numSols
        // if num[i] + sumSoFar > target, do not recurse
        // if num[i] + sumSoFar < target, recurse
        for (int i = 0; i < nums.size(); i++) {
            int sum = nums[i] + sumSoFar;
            if (sum == target) { 
                numSols++;
                continue;
            } else if (sum < target) {
                combinationSumHelper(nums, sum, target, numSols);
            }
        }
    }
};

void test1() {
    int ans = Solution().combinationSum4(vector<int>{1,2,3}, 32);
    cout << ans;
}

int main() {
    test1();
}